import numpy as np

# Valor verdadero de la magnitud
true_value = 10.0
# Error gaussiano a un nivel de confianza del 68 % (1 desviación estándar)
sigma = 0.1

# Conjunto 1
c1 = [10.09728388, 14.00677546,  9.97330124, 10.03403577, 10.11014852,
       9.85702412, 10.06725561, 10.08586217,  9.99805356, 10.09222044,
       9.96873542, 10.0603082 ,  9.78777855, 10.01658336, 10.12528138,
      14.1191067 , 14.88058074,  9.93142885, 10.36578158, 10.09212493,
       9.88930781,  9.9849203 , 10.02020365, 10.06761813, 10.00167307,
      14.14360885,  9.97572225, 10.15246422,  9.99133822,  9.90424116,
      10.10501793,  9.91869535, 10.07039047, 10.06006262, 10.01032325,
      10.00433072,  9.94767238,  9.93286478, 10.03173287,  9.92066554,
       9.97108415,  9.83034826,  9.94135165,  9.97791295, 10.16112762,
      10.06797202, 10.0263643 ,  9.97961471,  9.78969763, 10.05166943,
       9.91131264,  9.98634534,  9.97974543, 10.07362277,  9.88424591,
       9.99315227, 13.08325547, 10.02539059, 10.1065997 ,  9.83627837,
       9.96746961, 10.11354781,  9.98733076,  9.86269556, 10.06259149,
       9.73748286, 10.12718777, 10.02529891,  9.96605039, 10.03798876,
      10.02311967, 14.09473823,  9.9550051 , 10.17043078, 10.09425491,
      10.09005108, 10.01950653, 14.02402728,  9.89166114,  9.89202929,
       9.84356976,  9.95499455,  9.98309913,  9.9321069 , 10.02759998,
      10.01884409,  9.93640317,  9.84393786, 10.0192927 , 10.17990282,
       9.89937182, 10.02106925, 10.01263725,  9.89573905, 10.11424838,
      10.08980671, 15.03267925,  9.84762111,  9.96499894,  9.91684104]

# Conjunto 2
c2 = [10.13630034,  9.97264447, 10.04529035, 10.09188684, 10.00855386,
       9.90416116, 10.06281985, 10.10757175,  9.91838149, 10.0493961 ,
      10.02446199, 10.10448656,  9.77283484,  9.85600398,  9.90039543,
       9.82106987, 10.04031262, 10.06144001, 10.10988717,  9.74308934,
       9.99702215,  9.9859704 ,  9.89807371,  9.99585103,  9.93988323,
       9.89990546, 10.05643454,  9.94774945, 10.05428393,  9.88404769,
      10.00726402,  9.92586135,  9.961164  , 10.01782874,  9.92329839,
      10.06092894,  9.95886161,  9.89049626, 10.07754125,  9.83061899,
      10.13919176,  9.96898158, 10.06438291, 10.02476394,  9.81875984,
      10.0655806 , 10.00193677,  9.96395486,  9.89494378,  9.98505133,
       9.95691616,  9.97416592, 10.10692325, 10.18250899, 10.10749261,
      10.1037641 ,  9.86450491,  9.85218941, 10.02603336,  9.89537915,
       9.89940417,  9.91235537, 10.05523101, 10.08142251, 10.01086045,
       9.96034572, 10.1482815 ,  9.99360685,  9.91925958, 10.10239163,
      10.03106757,  9.93136713, 10.01773794, 10.05200499, 10.10178781,
       9.87483023,  9.94272878,  9.9671527 ,  9.99712438,  9.91594426,
       9.99679193,  9.88884633, 10.07940955,  9.90776214, 10.0123038 ,
       9.96426746, 10.01747625, 10.0392178 , 10.05489883,  9.67062975,
      10.06149946, 10.09805716,  9.83077801, 10.00208448, 10.02687927,
       9.99354725,  9.96120681,  9.94538711,  9.96279696,  9.86707357]

# Conjunto 3
c3 = [ 9.9032974 , 10.06746832,  9.98360179, 10.02011113, 10.01317417,
      10.09982861,  9.93307724, 10.04944268,  9.9000297 ,  9.96237539,
       9.91807876, 10.00338938,  9.99543713, 10.04674212, 10.08063919,
       9.99627534, 10.04558084, 10.06576491, 10.01787305,  9.90861284,
       9.99567107,  9.92934922, 10.07999909, 10.04248524, 10.04884959,
       9.90839636, 10.04266824,  9.98720842,  9.92392857, 10.00288059,
       9.96299254, 10.06967059,  9.94880142,  9.92020426, 10.07145123,
       9.91179764,  9.95914293,  9.98200017,  9.93190323,  9.92372118,
       9.90601205, 10.09884219, 10.04411164,  9.91673593, 10.09883873,
      10.06399646, 10.05061298, 10.02253924, 10.00159467,  9.98862911,
       9.99792681,  9.96149526,  9.93018115,  9.95211   ,  9.94530659,
       9.9713637 ,  9.91789999, 10.06730498, 10.02326566, 10.06438782,
       9.9794271 , 10.06077859,  9.99556797,  9.98272556, 10.01617789,
       9.95166775, 10.00406298, 10.02627066,  9.98342611, 10.03584277,
       9.98478095, 10.0834946 , 10.01403125, 10.04629496, 10.01444209,
      10.02043805, 10.01325408,  9.96317469,  9.93915936, 10.04026662,
      10.06055512,  9.98923231, 10.07144049, 10.09482468,  9.94512088,
      10.07417098, 10.00802839, 10.01338588,  9.96553168,  9.96240508,
       9.9963694 ,  9.96827214,  9.91378322,  9.96249148, 10.02461909,
       9.98179311,  9.95811448,  9.9903446 , 10.01001352, 10.06304347]

# Función para calcular puntajes z

def z_scores(data, mean=true_value, std=sigma):
    """Calcula los puntajes z de los datos"""
    data = np.array(data)
    return (data - mean) / std

# Calcular los puntajes z y máxima desviación
for name, data in zip(['Conjunto 1', 'Conjunto 2', 'Conjunto 3'], [c1, c2, c3]):
    zs = z_scores(data)
    max_dev = np.max(np.abs(zs))
    print(f'{name}: desviación máxima = {max_dev:.2f} σ')

# Determinar número de mediciones fuera de ±3σ
def count_outliers(data, mean=true_value, std=sigma, threshold=3):
    zs = z_scores(data, mean, std)
    return np.sum(np.abs(zs) > threshold)

for name, data in zip(['Conjunto 1', 'Conjunto 2', 'Conjunto 3'], [c1, c2, c3]):
    outliers = count_outliers(data)
    print(f'{name}: número de mediciones fuera de ±3σ = {outliers}')

# Determinar cuál conjunto es anómalo y dar una respuesta resumida.
outlier_counts = {}
for name, data in zip(['Conjunto 1', 'Conjunto 2', 'Conjunto 3'], [c1, c2, c3]):
    outlier_counts[name] = count_outliers(data)

anomalous_set = max(outlier_counts, key=outlier_counts.get)
print("\nRespuesta a la Tarea 3.9:")
print(f"El {anomalous_set} es anómalo porque contiene la mayor cantidad de mediciones ")
print("muy alejadas del valor verdadero de 10 m (varias más de 3 desviaciones estándar).")
print("Los conjuntos restantes presentan solo pocas o ninguna medición fuera del rango esperado ")
print("y son consistentes con un error gaussiano de ±0.1 m.")

## Nota: 6.0

# Uno de los conjuntos es anómalo porque
# contiene todas sus mediciones dentro de una
# desviación estándar. Nos esperamos aprox
# un 32% fuera de este rango.
